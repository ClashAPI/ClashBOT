// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using backend.Data;

namespace backend.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("backend.Helpers.ModeratorRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AutoModPluginId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AutoModPluginId");

                    b.ToTable("ModeratorRole");
                });

            modelBuilder.Entity("backend.Models.AdvancedCommand", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CommandCall")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CustomCommandPluginId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("Prefix")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.HasKey("Id");

                    b.HasIndex("CustomCommandPluginId");

                    b.ToTable("AdvancedCommand");
                });

            modelBuilder.Entity("backend.Models.AutoModPlugin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BadWordsSettingsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ExcessiveCapsSettingsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ExcessiveEmojisSettingsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ExcessiveMentionsSettingsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ExcessiveSpoilersSettingsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ExternalLinksSettingsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IgnoreBots")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("RepeatedTextSettingsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ServerInvitesSettingsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ZalgoSettingsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BadWordsSettingsId");

                    b.HasIndex("ExcessiveCapsSettingsId");

                    b.HasIndex("ExcessiveEmojisSettingsId");

                    b.HasIndex("ExcessiveMentionsSettingsId");

                    b.HasIndex("ExcessiveSpoilersSettingsId");

                    b.HasIndex("ExternalLinksSettingsId");

                    b.HasIndex("RepeatedTextSettingsId");

                    b.HasIndex("ServerInvitesSettingsId");

                    b.HasIndex("ZalgoSettingsId");

                    b.ToTable("AutoModPlugin");
                });

            modelBuilder.Entity("backend.Models.AutomatedAction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AutoModPluginId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("InfractionsLimit")
                        .HasColumnType("int");

                    b.Property<int>("ModerationAction")
                        .HasColumnType("int");

                    b.Property<int>("TimeLimitInSeconds")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AutoModPluginId");

                    b.ToTable("AutomatedAction");
                });

            modelBuilder.Entity("backend.Models.BadWord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BadWordsSettingsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("GuildId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Word")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BadWordsSettingsId");

                    b.HasIndex("GuildId");

                    b.ToTable("BadWord");
                });

            modelBuilder.Entity("backend.Models.BadWordsSettings", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("GuildId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ModerationAction")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GuildId");

                    b.ToTable("BadWordsSettings");
                });

            modelBuilder.Entity("backend.Models.ClashAPIPlugin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ClashAPIPlugin");
                });

            modelBuilder.Entity("backend.Models.Command", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CommandCall")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CustomCommandPluginId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("Prefix")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("Response")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomCommandPluginId");

                    b.ToTable("Command");
                });

            modelBuilder.Entity("backend.Models.CommandAction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AdvancedCommandId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AdvancedCommandId");

                    b.ToTable("CommandAction");
                });

            modelBuilder.Entity("backend.Models.CustomCommandPlugin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CustomCommandPlugin");
                });

            modelBuilder.Entity("backend.Models.DiscordChannel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BadWordsSettingsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ChannelId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ExcessiveCapsSettingsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ExcessiveEmojisSettingsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ExcessiveMentionsSettingsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ExcessiveSpoilersSettingsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ExternalLinksSettingsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("RepeatedTextSettingsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ServerInvitesSettingsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ZalgoSettingsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BadWordsSettingsId");

                    b.HasIndex("ExcessiveCapsSettingsId");

                    b.HasIndex("ExcessiveEmojisSettingsId");

                    b.HasIndex("ExcessiveMentionsSettingsId");

                    b.HasIndex("ExcessiveSpoilersSettingsId");

                    b.HasIndex("ExternalLinksSettingsId");

                    b.HasIndex("RepeatedTextSettingsId");

                    b.HasIndex("ServerInvitesSettingsId");

                    b.HasIndex("ZalgoSettingsId");

                    b.ToTable("DiscordChannel");
                });

            modelBuilder.Entity("backend.Models.DiscordRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BadWordsSettingsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ExcessiveCapsSettingsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ExcessiveEmojisSettingsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ExcessiveMentionsSettingsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ExcessiveSpoilersSettingsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ExternalLinksSettingsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("RepeatedTextSettingsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ServerInvitesSettingsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ZalgoSettingsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BadWordsSettingsId");

                    b.HasIndex("ExcessiveCapsSettingsId");

                    b.HasIndex("ExcessiveEmojisSettingsId");

                    b.HasIndex("ExcessiveMentionsSettingsId");

                    b.HasIndex("ExcessiveSpoilersSettingsId");

                    b.HasIndex("ExternalLinksSettingsId");

                    b.HasIndex("RepeatedTextSettingsId");

                    b.HasIndex("ServerInvitesSettingsId");

                    b.HasIndex("ZalgoSettingsId");

                    b.ToTable("DiscordRole");
                });

            modelBuilder.Entity("backend.Models.ExcessiveCapsSettings", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("GuildId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ModerationAction")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GuildId");

                    b.ToTable("ExcessiveCapsSettings");
                });

            modelBuilder.Entity("backend.Models.ExcessiveEmojisSettings", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("EmojiLimit")
                        .HasColumnType("int");

                    b.Property<Guid?>("GuildId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ModerationAction")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GuildId");

                    b.ToTable("ExcessiveEmojisSettings");
                });

            modelBuilder.Entity("backend.Models.ExcessiveMentionsSettings", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("GuildId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("MentionsLimit")
                        .HasColumnType("int");

                    b.Property<int>("ModerationAction")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GuildId");

                    b.ToTable("ExcessiveMentionsSettings");
                });

            modelBuilder.Entity("backend.Models.ExcessiveSpoilersSettings", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("GuildId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ModerationAction")
                        .HasColumnType("int");

                    b.Property<int>("SpoilerTagsLimit")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GuildId");

                    b.ToTable("ExcessiveSpoilersSettings");
                });

            modelBuilder.Entity("backend.Models.ExternalLinksSettings", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("GuildId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ModerationAction")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GuildId");

                    b.ToTable("ExternalLinksSettings");
                });

            modelBuilder.Entity("backend.Models.Guild", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AutoModPluginId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ClashAPIPluginId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CustomCommandPluginId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("GuildId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("NotificationsPluginId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AutoModPluginId");

                    b.HasIndex("ClashAPIPluginId");

                    b.HasIndex("CustomCommandPluginId");

                    b.HasIndex("NotificationsPluginId");

                    b.ToTable("Guilds");
                });

            modelBuilder.Entity("backend.Models.Infraction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("Date")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("GuildId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MemberId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GuildId");

                    b.ToTable("Infraction");
                });

            modelBuilder.Entity("backend.Models.LogEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ActionName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ActionType")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("GuildId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("InitiatorId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("InitiatorId");

                    b.ToTable("LogEntries");
                });

            modelBuilder.Entity("backend.Models.ModeratorCommand", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AutoModPluginId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CommandCall")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("Prefix")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("Response")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AutoModPluginId");

                    b.ToTable("ModeratorCommand");
                });

            modelBuilder.Entity("backend.Models.NotificationsPlugin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("NotificationsPlugin");
                });

            modelBuilder.Entity("backend.Models.RepeatedTextSettings", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("GuildId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ModerationAction")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GuildId");

                    b.ToTable("RepeatedTextSettings");
                });

            modelBuilder.Entity("backend.Models.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("backend.Models.ScheduledMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ChannelId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("GuildId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Interval")
                        .HasColumnType("int");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GuildId");

                    b.ToTable("ScheduledMessage");
                });

            modelBuilder.Entity("backend.Models.ServerInvitesSettings", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("GuildId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ModerationAction")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GuildId");

                    b.ToTable("ServerInvitesSettings");
                });

            modelBuilder.Entity("backend.Models.TemporaryBan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Discriminator")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("ExpiresAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("GuildId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("MemberId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GuildId");

                    b.ToTable("TemporaryBan");
                });

            modelBuilder.Entity("backend.Models.TwitchNotification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ChannelId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("NotificationsPluginId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("NotificationsPluginId");

                    b.ToTable("TwitchNotification");
                });

            modelBuilder.Entity("backend.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<Guid?>("GuildId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsSuperuser")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("GuildId");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("backend.Models.UserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("backend.Models.Website", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ExternalLinksSettingsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ExternalLinksSettingsId");

                    b.ToTable("Website");
                });

            modelBuilder.Entity("backend.Models.ZalgoSettings", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("GuildId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ModerationAction")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GuildId");

                    b.ToTable("ZalgoSettings");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("backend.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("backend.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("backend.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("backend.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("backend.Helpers.ModeratorRole", b =>
                {
                    b.HasOne("backend.Models.AutoModPlugin", "AutoModPlugin")
                        .WithMany("ModeratorRoles")
                        .HasForeignKey("AutoModPluginId");
                });

            modelBuilder.Entity("backend.Models.AdvancedCommand", b =>
                {
                    b.HasOne("backend.Models.CustomCommandPlugin", null)
                        .WithMany("AdvancedCommands")
                        .HasForeignKey("CustomCommandPluginId");
                });

            modelBuilder.Entity("backend.Models.AutoModPlugin", b =>
                {
                    b.HasOne("backend.Models.BadWordsSettings", "BadWordsSettings")
                        .WithMany()
                        .HasForeignKey("BadWordsSettingsId");

                    b.HasOne("backend.Models.ExcessiveCapsSettings", "ExcessiveCapsSettings")
                        .WithMany()
                        .HasForeignKey("ExcessiveCapsSettingsId");

                    b.HasOne("backend.Models.ExcessiveEmojisSettings", "ExcessiveEmojisSettings")
                        .WithMany()
                        .HasForeignKey("ExcessiveEmojisSettingsId");

                    b.HasOne("backend.Models.ExcessiveMentionsSettings", "ExcessiveMentionsSettings")
                        .WithMany()
                        .HasForeignKey("ExcessiveMentionsSettingsId");

                    b.HasOne("backend.Models.ExcessiveSpoilersSettings", "ExcessiveSpoilersSettings")
                        .WithMany()
                        .HasForeignKey("ExcessiveSpoilersSettingsId");

                    b.HasOne("backend.Models.ExternalLinksSettings", "ExternalLinksSettings")
                        .WithMany()
                        .HasForeignKey("ExternalLinksSettingsId");

                    b.HasOne("backend.Models.RepeatedTextSettings", "RepeatedTextSettings")
                        .WithMany()
                        .HasForeignKey("RepeatedTextSettingsId");

                    b.HasOne("backend.Models.ServerInvitesSettings", "ServerInvitesSettings")
                        .WithMany()
                        .HasForeignKey("ServerInvitesSettingsId");

                    b.HasOne("backend.Models.ZalgoSettings", "ZalgoSettings")
                        .WithMany()
                        .HasForeignKey("ZalgoSettingsId");
                });

            modelBuilder.Entity("backend.Models.AutomatedAction", b =>
                {
                    b.HasOne("backend.Models.AutoModPlugin", null)
                        .WithMany("AutomatedActions")
                        .HasForeignKey("AutoModPluginId");
                });

            modelBuilder.Entity("backend.Models.BadWord", b =>
                {
                    b.HasOne("backend.Models.BadWordsSettings", null)
                        .WithMany("BadWords")
                        .HasForeignKey("BadWordsSettingsId");

                    b.HasOne("backend.Models.Guild", "Guild")
                        .WithMany()
                        .HasForeignKey("GuildId");
                });

            modelBuilder.Entity("backend.Models.BadWordsSettings", b =>
                {
                    b.HasOne("backend.Models.Guild", "Guild")
                        .WithMany()
                        .HasForeignKey("GuildId");
                });

            modelBuilder.Entity("backend.Models.Command", b =>
                {
                    b.HasOne("backend.Models.CustomCommandPlugin", null)
                        .WithMany("Commands")
                        .HasForeignKey("CustomCommandPluginId");
                });

            modelBuilder.Entity("backend.Models.CommandAction", b =>
                {
                    b.HasOne("backend.Models.AdvancedCommand", null)
                        .WithMany("Actions")
                        .HasForeignKey("AdvancedCommandId");
                });

            modelBuilder.Entity("backend.Models.DiscordChannel", b =>
                {
                    b.HasOne("backend.Models.BadWordsSettings", null)
                        .WithMany("IgnoredChannels")
                        .HasForeignKey("BadWordsSettingsId");

                    b.HasOne("backend.Models.ExcessiveCapsSettings", null)
                        .WithMany("IgnoredChannels")
                        .HasForeignKey("ExcessiveCapsSettingsId");

                    b.HasOne("backend.Models.ExcessiveEmojisSettings", null)
                        .WithMany("IgnoredChannels")
                        .HasForeignKey("ExcessiveEmojisSettingsId");

                    b.HasOne("backend.Models.ExcessiveMentionsSettings", null)
                        .WithMany("IgnoredChannels")
                        .HasForeignKey("ExcessiveMentionsSettingsId");

                    b.HasOne("backend.Models.ExcessiveSpoilersSettings", null)
                        .WithMany("IgnoredChannels")
                        .HasForeignKey("ExcessiveSpoilersSettingsId");

                    b.HasOne("backend.Models.ExternalLinksSettings", null)
                        .WithMany("IgnoredChannels")
                        .HasForeignKey("ExternalLinksSettingsId");

                    b.HasOne("backend.Models.RepeatedTextSettings", null)
                        .WithMany("IgnoredChannels")
                        .HasForeignKey("RepeatedTextSettingsId");

                    b.HasOne("backend.Models.ServerInvitesSettings", null)
                        .WithMany("IgnoredChannels")
                        .HasForeignKey("ServerInvitesSettingsId");

                    b.HasOne("backend.Models.ZalgoSettings", null)
                        .WithMany("IgnoredChannels")
                        .HasForeignKey("ZalgoSettingsId");
                });

            modelBuilder.Entity("backend.Models.DiscordRole", b =>
                {
                    b.HasOne("backend.Models.BadWordsSettings", null)
                        .WithMany("AllowedRoles")
                        .HasForeignKey("BadWordsSettingsId");

                    b.HasOne("backend.Models.ExcessiveCapsSettings", null)
                        .WithMany("AllowedRoles")
                        .HasForeignKey("ExcessiveCapsSettingsId");

                    b.HasOne("backend.Models.ExcessiveEmojisSettings", null)
                        .WithMany("AllowedRoles")
                        .HasForeignKey("ExcessiveEmojisSettingsId");

                    b.HasOne("backend.Models.ExcessiveMentionsSettings", null)
                        .WithMany("AllowedRoles")
                        .HasForeignKey("ExcessiveMentionsSettingsId");

                    b.HasOne("backend.Models.ExcessiveSpoilersSettings", null)
                        .WithMany("AllowedRoles")
                        .HasForeignKey("ExcessiveSpoilersSettingsId");

                    b.HasOne("backend.Models.ExternalLinksSettings", null)
                        .WithMany("AllowedRoles")
                        .HasForeignKey("ExternalLinksSettingsId");

                    b.HasOne("backend.Models.RepeatedTextSettings", null)
                        .WithMany("AllowedRoles")
                        .HasForeignKey("RepeatedTextSettingsId");

                    b.HasOne("backend.Models.ServerInvitesSettings", null)
                        .WithMany("AllowedRoles")
                        .HasForeignKey("ServerInvitesSettingsId");

                    b.HasOne("backend.Models.ZalgoSettings", null)
                        .WithMany("AllowedRoles")
                        .HasForeignKey("ZalgoSettingsId");
                });

            modelBuilder.Entity("backend.Models.ExcessiveCapsSettings", b =>
                {
                    b.HasOne("backend.Models.Guild", "Guild")
                        .WithMany()
                        .HasForeignKey("GuildId");
                });

            modelBuilder.Entity("backend.Models.ExcessiveEmojisSettings", b =>
                {
                    b.HasOne("backend.Models.Guild", "Guild")
                        .WithMany()
                        .HasForeignKey("GuildId");
                });

            modelBuilder.Entity("backend.Models.ExcessiveMentionsSettings", b =>
                {
                    b.HasOne("backend.Models.Guild", "Guild")
                        .WithMany()
                        .HasForeignKey("GuildId");
                });

            modelBuilder.Entity("backend.Models.ExcessiveSpoilersSettings", b =>
                {
                    b.HasOne("backend.Models.Guild", "Guild")
                        .WithMany()
                        .HasForeignKey("GuildId");
                });

            modelBuilder.Entity("backend.Models.ExternalLinksSettings", b =>
                {
                    b.HasOne("backend.Models.Guild", "Guild")
                        .WithMany()
                        .HasForeignKey("GuildId");
                });

            modelBuilder.Entity("backend.Models.Guild", b =>
                {
                    b.HasOne("backend.Models.AutoModPlugin", "AutoModPlugin")
                        .WithMany()
                        .HasForeignKey("AutoModPluginId");

                    b.HasOne("backend.Models.ClashAPIPlugin", "ClashAPIPlugin")
                        .WithMany()
                        .HasForeignKey("ClashAPIPluginId");

                    b.HasOne("backend.Models.CustomCommandPlugin", "CustomCommandPlugin")
                        .WithMany()
                        .HasForeignKey("CustomCommandPluginId");

                    b.HasOne("backend.Models.NotificationsPlugin", "NotificationsPlugin")
                        .WithMany()
                        .HasForeignKey("NotificationsPluginId");
                });

            modelBuilder.Entity("backend.Models.Infraction", b =>
                {
                    b.HasOne("backend.Models.Guild", "Guild")
                        .WithMany("Infractions")
                        .HasForeignKey("GuildId");
                });

            modelBuilder.Entity("backend.Models.LogEntry", b =>
                {
                    b.HasOne("backend.Models.User", "Initiator")
                        .WithMany()
                        .HasForeignKey("InitiatorId");
                });

            modelBuilder.Entity("backend.Models.ModeratorCommand", b =>
                {
                    b.HasOne("backend.Models.AutoModPlugin", null)
                        .WithMany("ModeratorCommands")
                        .HasForeignKey("AutoModPluginId");
                });

            modelBuilder.Entity("backend.Models.RepeatedTextSettings", b =>
                {
                    b.HasOne("backend.Models.Guild", "Guild")
                        .WithMany()
                        .HasForeignKey("GuildId");
                });

            modelBuilder.Entity("backend.Models.ScheduledMessage", b =>
                {
                    b.HasOne("backend.Models.Guild", "Guild")
                        .WithMany("ScheduledMessages")
                        .HasForeignKey("GuildId");
                });

            modelBuilder.Entity("backend.Models.ServerInvitesSettings", b =>
                {
                    b.HasOne("backend.Models.Guild", "Guild")
                        .WithMany()
                        .HasForeignKey("GuildId");
                });

            modelBuilder.Entity("backend.Models.TemporaryBan", b =>
                {
                    b.HasOne("backend.Models.Guild", null)
                        .WithMany("TemporaryBans")
                        .HasForeignKey("GuildId");
                });

            modelBuilder.Entity("backend.Models.TwitchNotification", b =>
                {
                    b.HasOne("backend.Models.NotificationsPlugin", null)
                        .WithMany("TwitchNotifications")
                        .HasForeignKey("NotificationsPluginId");
                });

            modelBuilder.Entity("backend.Models.User", b =>
                {
                    b.HasOne("backend.Models.Guild", null)
                        .WithMany("Managers")
                        .HasForeignKey("GuildId");
                });

            modelBuilder.Entity("backend.Models.UserRole", b =>
                {
                    b.HasOne("backend.Models.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Models.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("backend.Models.Website", b =>
                {
                    b.HasOne("backend.Models.ExternalLinksSettings", null)
                        .WithMany("AllowedWebsites")
                        .HasForeignKey("ExternalLinksSettingsId");
                });

            modelBuilder.Entity("backend.Models.ZalgoSettings", b =>
                {
                    b.HasOne("backend.Models.Guild", "Guild")
                        .WithMany()
                        .HasForeignKey("GuildId");
                });
#pragma warning restore 612, 618
        }
    }
}
